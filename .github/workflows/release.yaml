name: Release
on:
  push:
    branches:
      - main

permissions:
  contents: write
  pages: write
  id-token: write
  packages: write

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    outputs:
      version:  ${{ steps.semantic-release.outputs.version }}
      release_id: ${{ steps.get-release.outputs.result }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          cache: 'npm'
          node-version: 'lts/*'
      - name: Install dependencies
        run: yarn
      - name: Release
        id: semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release
        # I couldn't figure out how to get release id from semantic-release, so just read
      - name: Get Release
        id: get-release
        uses: actions/github-script@v6
        env:
          version: ${{ steps.semantic-release.outputs.version }}
        with:
          script: |
            const { data } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: "v" + process.env.version
            })
            return data.id

  build-tauri:
    needs: release
    strategy:
      fail-fast: false
      matrix:
        include:
          #- platform: macos-latest
          #  target: aarch64-apple-darwin
          - platform: macos-latest
            target: x86_64-apple-darwin
          #- platform: ubuntu-latest
          #  target: aarch64-unknown-linux-gnu
          - platform: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          #- platform: windows-latest
          #  target: aarch64-pc-windows-msvc
          - platform: windows-latest
            target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.platform }}
    steps:
    - uses: actions/checkout@v3
    - name: setup node
      uses: actions/setup-node@v3
      with:
        node-version: 'lts/*'
        cache: 'npm'
    - name: bump version number
      run: npm version ${{ needs.release.outputs.version }} --no-git-tag-version
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: ${{ matrix.target }}
    - uses: Swatinem/rust-cache@v2
      with:
        workspaces: src-tauri
    - name: Install Protoc
      uses: arduino/setup-protoc@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: install dependencies (ubuntu only)
      if: matrix.platform == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
    - name: install app dependencies and build it
      run: yarn && yarn build
    - name: Update src-tauri/tauri.conf.json Version
      uses: jossef/action-set-json-field@v2
      with:
        file: src-tauri/tauri.conf.json
        field: package.version
        value: ${{ needs.release.outputs.version }}
    - uses: FabianLars/tauri-action@artifacts-path # change back to #    - uses: tauri-apps/tauri-action@v0 once https://github.com/tauri-apps/tauri-action/pull/301 is merged
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
        APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
        APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_PASSWORD: ${{ secrets.APPLE_PASSWORD }}
        APPLE_SIGNING_IDENTITY: ${{ secrets.APPLE_SIGNING_IDENTITY }}
      with:
        releaseId: ${{ needs.release.outputs.release_id }}
        args: --target ${{ matrix.target }}

  build-server:
    needs: [release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: docker/setup-buildx-action@v2
    - name: Log in to the Container registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
    - name: Build and push
      uses: docker/build-push-action@v3
      with:
        context: src-tauri
        push: ${{ github.event_name != 'pull_request' }}
        tags: ghcr.io/${{ github.repository }}/server:${{ needs.release.outputs.version }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  announce-release:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: [build-tauri]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - run: mkdir -p _site
      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
      - name: install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Generate update.json
        uses: actions-rs/cargo@v1
        with:
          cargo: run --bin update > _site/update.json
      - name: Setup Pages
        uses: actions/configure-pages@v2
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: '_site/'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

